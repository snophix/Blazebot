//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputAssets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""GmaePlay"",
            ""id"": ""66588b64-9ef9-4a82-b606-11ba9ef5008a"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""77e48289-1171-4fdf-a481-7fb812277bc3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""7cb0a6ab-1237-4cce-94f5-fa5481e9b2c3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""7dbcad65-49a2-43dd-8616-59e1f9896393"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jetpack"",
                    ""type"": ""Button"",
                    ""id"": ""32751f89-ef13-4daf-8ab1-4e6e5439de34"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2f6a2b32-13b0-4760-83f3-5d81feecb558"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3fc24ca6-a47e-4fab-b3a0-74e8ec70e0d8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57fd5773-58a5-4453-8381-52a465ca134c"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""e8452a7b-2749-4030-8fd9-8d45b97ed815"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""36423ef1-2240-4751-b8e7-aa380077b78d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a6e179ad-5fd5-4763-abe2-7a1fb6c0f0b1"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""94e1e4cb-17e1-40c2-bc9b-bb5e62a6006f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3fadc1ae-be5d-4056-b9f2-b524ca179dd2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f689ddfe-43f6-428d-ae6b-fe2dafa9c806"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0ea55271-e7ef-41f2-b0ee-7d88c698374b"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""65be0cc9-10fd-4633-9ed7-61d184b2e5ee"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jetpack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GmaePlay
        m_GmaePlay = asset.FindActionMap("GmaePlay", throwIfNotFound: true);
        m_GmaePlay_Jump = m_GmaePlay.FindAction("Jump", throwIfNotFound: true);
        m_GmaePlay_Move = m_GmaePlay.FindAction("Move", throwIfNotFound: true);
        m_GmaePlay_Sprint = m_GmaePlay.FindAction("Sprint", throwIfNotFound: true);
        m_GmaePlay_Jetpack = m_GmaePlay.FindAction("Jetpack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GmaePlay
    private readonly InputActionMap m_GmaePlay;
    private IGmaePlayActions m_GmaePlayActionsCallbackInterface;
    private readonly InputAction m_GmaePlay_Jump;
    private readonly InputAction m_GmaePlay_Move;
    private readonly InputAction m_GmaePlay_Sprint;
    private readonly InputAction m_GmaePlay_Jetpack;
    public struct GmaePlayActions
    {
        private @PlayerControls m_Wrapper;
        public GmaePlayActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_GmaePlay_Jump;
        public InputAction @Move => m_Wrapper.m_GmaePlay_Move;
        public InputAction @Sprint => m_Wrapper.m_GmaePlay_Sprint;
        public InputAction @Jetpack => m_Wrapper.m_GmaePlay_Jetpack;
        public InputActionMap Get() { return m_Wrapper.m_GmaePlay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GmaePlayActions set) { return set.Get(); }
        public void SetCallbacks(IGmaePlayActions instance)
        {
            if (m_Wrapper.m_GmaePlayActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_GmaePlayActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_GmaePlayActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_GmaePlayActionsCallbackInterface.OnJump;
                @Move.started -= m_Wrapper.m_GmaePlayActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_GmaePlayActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_GmaePlayActionsCallbackInterface.OnMove;
                @Sprint.started -= m_Wrapper.m_GmaePlayActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_GmaePlayActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_GmaePlayActionsCallbackInterface.OnSprint;
                @Jetpack.started -= m_Wrapper.m_GmaePlayActionsCallbackInterface.OnJetpack;
                @Jetpack.performed -= m_Wrapper.m_GmaePlayActionsCallbackInterface.OnJetpack;
                @Jetpack.canceled -= m_Wrapper.m_GmaePlayActionsCallbackInterface.OnJetpack;
            }
            m_Wrapper.m_GmaePlayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Jetpack.started += instance.OnJetpack;
                @Jetpack.performed += instance.OnJetpack;
                @Jetpack.canceled += instance.OnJetpack;
            }
        }
    }
    public GmaePlayActions @GmaePlay => new GmaePlayActions(this);
    public interface IGmaePlayActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnJetpack(InputAction.CallbackContext context);
    }
}
